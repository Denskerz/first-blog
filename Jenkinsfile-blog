pipeline {
    agent any
    
    options{
	ansiColor('xterm')
    }

    environment {
	def projectName = "first-blog"
	def imageName = "${projectName}"
	def dateNow = new Date().format('yyyyMMddHHmm')
	def buildID = "${env.BUILD_ID}"
	def jobName = "${env.JOB_NAME}"
	def jenkinsURL = "${JENKINS_URL}"
	def urlRepo = "https://github.com/Denskerz/first-blog.git"
	registry = "denskerz/work.sberb"
        registryCredential = 'dockerhub_id'
	dockerImage = ''    
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
		echo "\033[35m Project name is ${projectName} from ${urlRepo}. \033[0m"
		echo "\033[35m Checkout was complited. \033[0m"
	    }
        }

        stage('Job selection') {
            steps {
                script {
		    if (jobName.matches("(.*)build")){
		        stage('Build') {
			    echo "\033[35m Image name: ${imageName} \033[0m"
		            echo "\033[35m Running attemp â„–${buildID} of ${projectName} on ${jenkinsURL}... \033[0m"
                            dockerImage = docker.build registry + ":${imageName}-${dateNow}"
			    echo "\033[35m Build was complited. \033[0m"
		        }
		        stage('Publish'){
			    docker.withRegistry( '', registryCredential ) {
				dockerImage.push()
		            }
			    echo "\033[35m Image has been pushed to docker hub. \033[0m"
		        }
		        stage('Cleaning up'){
			    sh "docker image prune --all --force && docker images"
		        }
		    }
		    
		    if(jobName.matches("(.*)test")){
                        stage('Test') {
                            sh 'pip install -r requirements.txt'
                            sh 'python manage.py test'
                            echo "\033[35m Tests were complited. \033[0m"
                        }
                    }

		    if(jobName.matches("(.*)deploy")){
			stage('Configuring servers') {
			    sh 'ansible-playbook -i ./ansible/hosts ./ansible/provision.yml --user=denis --extra-vars "ansible_sudo_pass=2002denis"'
			    echo "\033[35m Hosts are configured for deployment. \033[0m"
			}
			stage('Deploy') {
			    sh 'docker-compose -f docker-compose.yml up -d && sleep 20'
                            echo "\033[35m Web-server has been launched at ${dateNow} for a 10 seconds. \033[0m"
			}
			stage('Cleaning up'){
			    echo "\033[35m Remove cache from a local registry \033[0m"
                            sh 'docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'
                            sh "docker image prune --all --force && docker images"
                        }
                    }
		}
	    }
	}
    }
}
